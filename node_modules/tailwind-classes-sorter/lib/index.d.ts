interface Options {
    /** Tailwind config path or object */
    config?: any | string;
    /** Position of component and utility classes */
    classesPosition?: TWClassesSorter['classesPosition'];
    /** Position of unknown classes */
    unknownClassesPosition?: TWClassesSorter['unknownClassesPosition'];
    /** Custom path to node_modules */
    nodeModulesPath?: string;
}
export default class TWClassesSorter {
    static readConfig(path?: string): any;
    classesPosition: 'components-first' | 'components-last' | 'as-is';
    unknownClassesPosition: 'start' | 'end';
    private currentPluginsOrder;
    private defaultPluginsOrder;
    private sortedSelectors;
    private sortedMediaQueries;
    private config;
    private defaultConfig;
    private processPlugins;
    private resolveConfig;
    private tailwindInstallPath;
    private tailwindPluginsPath;
    /**
     * Creates an instance of TWClassesSorter.
     */
    constructor(opts?: Options);
    get pluginsOrder(): string[];
    /**
     * Sorts an array of classes by Tailwind plugins.
     * @param classes List of classes to sort
     */
    sortClasslist(classes: string[] | string): string[];
    /**
     * Changes the order classes are sorted by using Tailwind's plugins.
     * @param newPluginOrder New plugins order used for sorting classes
     */
    setPluginOrder(newPluginOrder: string[] | ((defaultOrder: string[]) => string[])): void;
    /**
     * Changes the tailwind config.
     * @param config New config path or object (or null to try to find tailwind.config.js)
     */
    setConfig(config?: string | any): void;
    /**
     * Returns a class list array from a string of multiple classes.
     * @param classes String of classes
     * @static
     */
    static classesFromString(classes: string): string[];
    private getAllSelectors;
    private getClassParts;
    private loopObjectForSelectors;
    private getSelectors;
}
export {};
