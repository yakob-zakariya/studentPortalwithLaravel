"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const find_up_1 = __importDefault(require("find-up"));
class TWClassesSorter {
    /**
     * Creates an instance of TWClassesSorter.
     */
    constructor(opts = {}) {
        this.sortedMediaQueries = ['sm', 'md', 'lg', 'xl'];
        if (opts.config == undefined) {
            opts.config = TWClassesSorter.readConfig();
        }
        else if (typeof opts.config === 'string') {
            opts.config = TWClassesSorter.readConfig(opts.config);
        }
        this.classesPosition = opts.classesPosition || 'components-first';
        this.unknownClassesPosition = opts.unknownClassesPosition || 'start';
        if (!opts.nodeModulesPath) {
            opts.nodeModulesPath = path_1.default.resolve(process.cwd(), 'node_modules');
        }
        this.tailwindInstallPath = path_1.default.join(opts.nodeModulesPath, 'tailwindcss');
        this.defaultConfig = require(path_1.default.join(this.tailwindInstallPath, 'stubs/defaultConfig.stub.js'));
        this.processPlugins = require(path_1.default.join(this.tailwindInstallPath, 'lib/util/processPlugins')).default;
        this.resolveConfig = require(path_1.default.join(this.tailwindInstallPath, 'lib/util/resolveConfig')).default;
        this.tailwindPluginsPath = path_1.default.join(this.tailwindInstallPath, 'lib', 'plugins');
        try {
            this.defaultPluginsOrder = Object.keys(require(path_1.default.join(this.tailwindPluginsPath, 'index')));
            if (this.defaultPluginsOrder.length === 0) {
                throw 1;
            }
        }
        catch (err) {
            this.defaultPluginsOrder = fs_1.default
                .readdirSync(this.tailwindPluginsPath)
                .filter(fileName => fileName.indexOf('.') !== -1)
                .map(fileName => fileName.split('.')[0])
                .filter(plugin => plugin !== 'index')
                .sort();
        }
        this.currentPluginsOrder = this.defaultPluginsOrder;
        this.config = this.resolveConfig([opts.config || {}, this.defaultConfig]);
        this.sortedSelectors = this.getAllSelectors();
    }
    static readConfig(path) {
        if (path === undefined) {
            path = find_up_1.default.sync('tailwind.config.js', {
                cwd: __dirname,
            });
            if (!path) {
                return null;
            }
        }
        return require(path);
    }
    get pluginsOrder() {
        return this.currentPluginsOrder.slice();
    }
    /**
     * Sorts an array of classes by Tailwind plugins.
     * @param classes List of classes to sort
     */
    sortClasslist(classes) {
        const classesArray = typeof classes === 'string'
            ? TWClassesSorter.classesFromString(classes)
            : classes.slice();
        return classesArray.sort((a, b) => {
            const aParts = this.getClassParts(a);
            const bParts = this.getClassParts(b);
            const aClassBaseIndex = this.sortedSelectors.indexOf(aParts.classBase);
            const bClassBaseIndex = this.sortedSelectors.indexOf(bParts.classBase);
            const aHasMediaQuery = Boolean(aParts.mediaQuery) &&
                this.sortedMediaQueries.indexOf(String(aParts.mediaQuery)) !== -1;
            const bHasMediaQuery = Boolean(bParts.mediaQuery) &&
                this.sortedMediaQueries.indexOf(String(bParts.mediaQuery)) !== -1;
            const aMediaQueryIndex = this.sortedMediaQueries.indexOf(String(aParts.mediaQuery));
            const bMediaQueryIndex = this.sortedMediaQueries.indexOf(String(bParts.mediaQuery));
            // A or B have unknown selector
            if (aClassBaseIndex !== -1 && bClassBaseIndex === -1) {
                // B has unknown class
                return this.unknownClassesPosition === 'start' ? 1 : -1;
            }
            if (aClassBaseIndex === -1 && bClassBaseIndex !== -1) {
                // A has unknown class
                return this.unknownClassesPosition === 'start' ? -1 : 1;
            }
            // Sort by media query
            if (!aHasMediaQuery && bHasMediaQuery) {
                return -1;
            }
            if (aHasMediaQuery && !bHasMediaQuery) {
                return 1;
            }
            // Both or none have MQ at this point
            if (aHasMediaQuery && bHasMediaQuery) {
                if (aMediaQueryIndex < bMediaQueryIndex) {
                    return -1;
                }
                if (this.sortedMediaQueries.indexOf(String(aParts.mediaQuery)) >
                    this.sortedMediaQueries.indexOf(String(bParts.mediaQuery))) {
                    return 1;
                }
            }
            // Sort based on sorted selector
            if (aClassBaseIndex !== -1 && bClassBaseIndex !== -1) {
                if (aClassBaseIndex < bClassBaseIndex) {
                    return -1;
                }
                if (aClassBaseIndex > bClassBaseIndex) {
                    return 1;
                }
            }
            return 0;
        });
    }
    /**
     * Changes the order classes are sorted by using Tailwind's plugins.
     * @param newPluginOrder New plugins order used for sorting classes
     */
    setPluginOrder(newPluginOrder) {
        if (Array.isArray(newPluginOrder)) {
            this.currentPluginsOrder = newPluginOrder;
        }
        else {
            this.currentPluginsOrder = Array.from(new Set(newPluginOrder(this.defaultPluginsOrder.slice())));
        }
        this.sortedSelectors = this.getAllSelectors();
    }
    /**
     * Changes the tailwind config.
     * @param config New config path or object (or null to try to find tailwind.config.js)
     */
    setConfig(config) {
        let newConfig;
        if (config == undefined) {
            newConfig = TWClassesSorter.readConfig();
        }
        else if (typeof config === 'string') {
            newConfig = TWClassesSorter.readConfig(config);
        }
        else {
            newConfig = config;
        }
        this.config = this.resolveConfig([newConfig || {}, this.defaultConfig]);
    }
    /**
     * Returns a class list array from a string of multiple classes.
     * @param classes String of classes
     * @static
     */
    static classesFromString(classes) {
        return classes
            .split(' ')
            .map(className => className.trim())
            .filter(Boolean);
    }
    getAllSelectors() {
        const allSelectors = [];
        const allComponentSelectors = [];
        const allUtilitySelectors = [];
        this.currentPluginsOrder
            .filter(pluginName => this.config.corePlugins.some(corePlugin => corePlugin === pluginName))
            .forEach(pluginName => {
            const filename = path_1.default.join(this.tailwindPluginsPath, `${pluginName}.js`);
            let pluginModule;
            try {
                pluginModule = require(filename);
            }
            catch (err) {
                return;
            }
            const pluginDefault = typeof pluginModule === 'function'
                ? pluginModule()
                : pluginModule.default();
            const { components, utilities } = this.processPlugins([pluginDefault], this.config);
            const componentSelectors = this.getSelectors(components);
            const utilitiySelectors = this.getSelectors(utilities);
            switch (this.classesPosition) {
                case 'as-is':
                    allSelectors.push(...[...componentSelectors, ...utilitiySelectors].sort());
                    break;
                case 'components-first':
                case 'components-last':
                    allComponentSelectors.push(...componentSelectors);
                    allUtilitySelectors.push(...utilitiySelectors);
                    break;
            }
        });
        switch (this.classesPosition) {
            case 'as-is':
                return allSelectors;
            case 'components-first':
                return [...allComponentSelectors, ...allUtilitySelectors];
            case 'components-last':
                return [...allUtilitySelectors, ...allComponentSelectors];
        }
    }
    getClassParts(className) {
        if (className.indexOf(':') === -1) {
            return {
                classBase: className,
                mediaQuery: false,
            };
        }
        const parts = className.split(':');
        if (parts.length === 1) {
            return {
                classBase: parts[0],
                mediaQuery: false,
            };
        }
        return {
            classBase: parts[1],
            mediaQuery: parts[0],
        };
    }
    loopObjectForSelectors(obj) {
        const selectors = [];
        switch (obj.type) {
            case 'rule': {
                if (obj.selector) {
                    let cleanedValue = obj.selector
                        .trim()
                        .split(' ')[0]
                        .replace(/\\/g, '');
                    if (cleanedValue.startsWith('.')) {
                        cleanedValue = cleanedValue.substr(1);
                    }
                    selectors.push(cleanedValue);
                }
                return selectors;
            }
            case 'decl':
                return selectors;
            case 'atrule': {
                if (obj.name && obj.name.startsWith('keyframes')) {
                    return selectors;
                }
            }
            default: {
                if (Array.isArray(obj.nodes)) {
                    selectors.push(...obj.nodes.reduce((acc, node) => [...acc, ...this.loopObjectForSelectors(node)], []));
                }
                return selectors;
            }
        }
    }
    getSelectors(styles) {
        return [
            ...new Set(styles.reduce((acc, style) => {
                const selectors = this.loopObjectForSelectors(style);
                acc.push(...selectors);
                return acc;
            }, [])),
        ].sort();
    }
}
exports.default = TWClassesSorter;
